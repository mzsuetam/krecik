# Generated from Krecik.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        37,
        467,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        1,
        0,
        5,
        0,
        52,
        8,
        0,
        10,
        0,
        12,
        0,
        55,
        9,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        59,
        8,
        0,
        10,
        0,
        12,
        0,
        62,
        9,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        5,
        1,
        68,
        8,
        1,
        10,
        1,
        12,
        1,
        71,
        9,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        76,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        5,
        2,
        82,
        8,
        2,
        10,
        2,
        12,
        2,
        85,
        9,
        2,
        1,
        2,
        1,
        2,
        5,
        2,
        89,
        8,
        2,
        10,
        2,
        12,
        2,
        92,
        9,
        2,
        1,
        2,
        3,
        2,
        95,
        8,
        2,
        1,
        2,
        5,
        2,
        98,
        8,
        2,
        10,
        2,
        12,
        2,
        101,
        9,
        2,
        1,
        2,
        1,
        2,
        5,
        2,
        105,
        8,
        2,
        10,
        2,
        12,
        2,
        108,
        9,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        5,
        3,
        114,
        8,
        3,
        10,
        3,
        12,
        3,
        117,
        9,
        3,
        1,
        3,
        1,
        3,
        5,
        3,
        121,
        8,
        3,
        10,
        3,
        12,
        3,
        124,
        9,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        129,
        8,
        3,
        1,
        4,
        1,
        4,
        5,
        4,
        133,
        8,
        4,
        10,
        4,
        12,
        4,
        136,
        9,
        4,
        1,
        4,
        3,
        4,
        139,
        8,
        4,
        1,
        4,
        5,
        4,
        142,
        8,
        4,
        10,
        4,
        12,
        4,
        145,
        9,
        4,
        1,
        4,
        3,
        4,
        148,
        8,
        4,
        1,
        4,
        5,
        4,
        151,
        8,
        4,
        10,
        4,
        12,
        4,
        154,
        9,
        4,
        1,
        4,
        3,
        4,
        157,
        8,
        4,
        1,
        4,
        5,
        4,
        160,
        8,
        4,
        10,
        4,
        12,
        4,
        163,
        9,
        4,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        5,
        5,
        169,
        8,
        5,
        10,
        5,
        12,
        5,
        172,
        9,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        177,
        8,
        5,
        1,
        6,
        1,
        6,
        5,
        6,
        181,
        8,
        6,
        10,
        6,
        12,
        6,
        184,
        9,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        190,
        8,
        6,
        10,
        6,
        12,
        6,
        193,
        9,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        197,
        8,
        6,
        10,
        6,
        12,
        6,
        200,
        9,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        204,
        8,
        6,
        10,
        6,
        12,
        6,
        207,
        9,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        211,
        8,
        6,
        10,
        6,
        12,
        6,
        214,
        9,
        6,
        3,
        6,
        216,
        8,
        6,
        1,
        6,
        1,
        6,
        5,
        6,
        220,
        8,
        6,
        10,
        6,
        12,
        6,
        223,
        9,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        227,
        8,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        3,
        7,
        232,
        8,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        237,
        8,
        8,
        10,
        8,
        12,
        8,
        240,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        246,
        8,
        8,
        10,
        8,
        12,
        8,
        249,
        9,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        253,
        8,
        8,
        10,
        8,
        12,
        8,
        256,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        261,
        8,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        265,
        8,
        8,
        10,
        8,
        12,
        8,
        268,
        9,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        272,
        8,
        8,
        10,
        8,
        12,
        8,
        275,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        281,
        8,
        8,
        10,
        8,
        12,
        8,
        284,
        9,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        288,
        8,
        8,
        10,
        8,
        12,
        8,
        291,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        297,
        8,
        8,
        10,
        8,
        12,
        8,
        300,
        9,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        304,
        8,
        8,
        10,
        8,
        12,
        8,
        307,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        313,
        8,
        8,
        10,
        8,
        12,
        8,
        316,
        9,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        320,
        8,
        8,
        10,
        8,
        12,
        8,
        323,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        328,
        8,
        8,
        10,
        8,
        12,
        8,
        331,
        9,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        335,
        8,
        8,
        10,
        8,
        12,
        8,
        338,
        9,
        8,
        1,
        8,
        5,
        8,
        341,
        8,
        8,
        10,
        8,
        12,
        8,
        344,
        9,
        8,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        3,
        12,
        355,
        8,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        5,
        13,
        360,
        8,
        13,
        10,
        13,
        12,
        13,
        363,
        9,
        13,
        1,
        13,
        3,
        13,
        366,
        8,
        13,
        1,
        13,
        5,
        13,
        369,
        8,
        13,
        10,
        13,
        12,
        13,
        372,
        9,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        5,
        14,
        378,
        8,
        14,
        10,
        14,
        12,
        14,
        381,
        9,
        14,
        1,
        14,
        1,
        14,
        5,
        14,
        385,
        8,
        14,
        10,
        14,
        12,
        14,
        388,
        9,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        393,
        8,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        3,
        15,
        398,
        8,
        15,
        1,
        15,
        5,
        15,
        401,
        8,
        15,
        10,
        15,
        12,
        15,
        404,
        9,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        3,
        16,
        410,
        8,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        414,
        8,
        16,
        10,
        16,
        12,
        16,
        417,
        9,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        421,
        8,
        16,
        10,
        16,
        12,
        16,
        424,
        9,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        428,
        8,
        16,
        10,
        16,
        12,
        16,
        431,
        9,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        3,
        23,
        455,
        8,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        459,
        8,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        3,
        24,
        465,
        8,
        24,
        1,
        24,
        0,
        1,
        16,
        25,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        0,
        6,
        1,
        0,
        7,
        8,
        2,
        0,
        9,
        10,
        15,
        15,
        1,
        0,
        18,
        21,
        2,
        0,
        12,
        14,
        28,
        28,
        1,
        0,
        12,
        14,
        1,
        0,
        33,
        35,
        510,
        0,
        53,
        1,
        0,
        0,
        0,
        2,
        75,
        1,
        0,
        0,
        0,
        4,
        77,
        1,
        0,
        0,
        0,
        6,
        128,
        1,
        0,
        0,
        0,
        8,
        130,
        1,
        0,
        0,
        0,
        10,
        176,
        1,
        0,
        0,
        0,
        12,
        226,
        1,
        0,
        0,
        0,
        14,
        231,
        1,
        0,
        0,
        0,
        16,
        260,
        1,
        0,
        0,
        0,
        18,
        345,
        1,
        0,
        0,
        0,
        20,
        347,
        1,
        0,
        0,
        0,
        22,
        349,
        1,
        0,
        0,
        0,
        24,
        354,
        1,
        0,
        0,
        0,
        26,
        356,
        1,
        0,
        0,
        0,
        28,
        392,
        1,
        0,
        0,
        0,
        30,
        394,
        1,
        0,
        0,
        0,
        32,
        407,
        1,
        0,
        0,
        0,
        34,
        434,
        1,
        0,
        0,
        0,
        36,
        436,
        1,
        0,
        0,
        0,
        38,
        442,
        1,
        0,
        0,
        0,
        40,
        444,
        1,
        0,
        0,
        0,
        42,
        446,
        1,
        0,
        0,
        0,
        44,
        450,
        1,
        0,
        0,
        0,
        46,
        452,
        1,
        0,
        0,
        0,
        48,
        464,
        1,
        0,
        0,
        0,
        50,
        52,
        5,
        29,
        0,
        0,
        51,
        50,
        1,
        0,
        0,
        0,
        52,
        55,
        1,
        0,
        0,
        0,
        53,
        51,
        1,
        0,
        0,
        0,
        53,
        54,
        1,
        0,
        0,
        0,
        54,
        56,
        1,
        0,
        0,
        0,
        55,
        53,
        1,
        0,
        0,
        0,
        56,
        60,
        3,
        2,
        1,
        0,
        57,
        59,
        5,
        29,
        0,
        0,
        58,
        57,
        1,
        0,
        0,
        0,
        59,
        62,
        1,
        0,
        0,
        0,
        60,
        58,
        1,
        0,
        0,
        0,
        60,
        61,
        1,
        0,
        0,
        0,
        61,
        63,
        1,
        0,
        0,
        0,
        62,
        60,
        1,
        0,
        0,
        0,
        63,
        64,
        5,
        0,
        0,
        1,
        64,
        1,
        1,
        0,
        0,
        0,
        65,
        69,
        3,
        4,
        2,
        0,
        66,
        68,
        5,
        29,
        0,
        0,
        67,
        66,
        1,
        0,
        0,
        0,
        68,
        71,
        1,
        0,
        0,
        0,
        69,
        67,
        1,
        0,
        0,
        0,
        69,
        70,
        1,
        0,
        0,
        0,
        70,
        72,
        1,
        0,
        0,
        0,
        71,
        69,
        1,
        0,
        0,
        0,
        72,
        73,
        3,
        2,
        1,
        0,
        73,
        76,
        1,
        0,
        0,
        0,
        74,
        76,
        3,
        4,
        2,
        0,
        75,
        65,
        1,
        0,
        0,
        0,
        75,
        74,
        1,
        0,
        0,
        0,
        76,
        3,
        1,
        0,
        0,
        0,
        77,
        78,
        3,
        38,
        19,
        0,
        78,
        79,
        5,
        29,
        0,
        0,
        79,
        83,
        5,
        36,
        0,
        0,
        80,
        82,
        5,
        29,
        0,
        0,
        81,
        80,
        1,
        0,
        0,
        0,
        82,
        85,
        1,
        0,
        0,
        0,
        83,
        81,
        1,
        0,
        0,
        0,
        83,
        84,
        1,
        0,
        0,
        0,
        84,
        86,
        1,
        0,
        0,
        0,
        85,
        83,
        1,
        0,
        0,
        0,
        86,
        90,
        5,
        1,
        0,
        0,
        87,
        89,
        5,
        29,
        0,
        0,
        88,
        87,
        1,
        0,
        0,
        0,
        89,
        92,
        1,
        0,
        0,
        0,
        90,
        88,
        1,
        0,
        0,
        0,
        90,
        91,
        1,
        0,
        0,
        0,
        91,
        94,
        1,
        0,
        0,
        0,
        92,
        90,
        1,
        0,
        0,
        0,
        93,
        95,
        3,
        6,
        3,
        0,
        94,
        93,
        1,
        0,
        0,
        0,
        94,
        95,
        1,
        0,
        0,
        0,
        95,
        99,
        1,
        0,
        0,
        0,
        96,
        98,
        5,
        29,
        0,
        0,
        97,
        96,
        1,
        0,
        0,
        0,
        98,
        101,
        1,
        0,
        0,
        0,
        99,
        97,
        1,
        0,
        0,
        0,
        99,
        100,
        1,
        0,
        0,
        0,
        100,
        102,
        1,
        0,
        0,
        0,
        101,
        99,
        1,
        0,
        0,
        0,
        102,
        106,
        5,
        2,
        0,
        0,
        103,
        105,
        5,
        29,
        0,
        0,
        104,
        103,
        1,
        0,
        0,
        0,
        105,
        108,
        1,
        0,
        0,
        0,
        106,
        104,
        1,
        0,
        0,
        0,
        106,
        107,
        1,
        0,
        0,
        0,
        107,
        109,
        1,
        0,
        0,
        0,
        108,
        106,
        1,
        0,
        0,
        0,
        109,
        110,
        3,
        8,
        4,
        0,
        110,
        5,
        1,
        0,
        0,
        0,
        111,
        115,
        3,
        42,
        21,
        0,
        112,
        114,
        5,
        29,
        0,
        0,
        113,
        112,
        1,
        0,
        0,
        0,
        114,
        117,
        1,
        0,
        0,
        0,
        115,
        113,
        1,
        0,
        0,
        0,
        115,
        116,
        1,
        0,
        0,
        0,
        116,
        118,
        1,
        0,
        0,
        0,
        117,
        115,
        1,
        0,
        0,
        0,
        118,
        122,
        5,
        3,
        0,
        0,
        119,
        121,
        5,
        29,
        0,
        0,
        120,
        119,
        1,
        0,
        0,
        0,
        121,
        124,
        1,
        0,
        0,
        0,
        122,
        120,
        1,
        0,
        0,
        0,
        122,
        123,
        1,
        0,
        0,
        0,
        123,
        125,
        1,
        0,
        0,
        0,
        124,
        122,
        1,
        0,
        0,
        0,
        125,
        126,
        3,
        6,
        3,
        0,
        126,
        129,
        1,
        0,
        0,
        0,
        127,
        129,
        3,
        42,
        21,
        0,
        128,
        111,
        1,
        0,
        0,
        0,
        128,
        127,
        1,
        0,
        0,
        0,
        129,
        7,
        1,
        0,
        0,
        0,
        130,
        134,
        5,
        4,
        0,
        0,
        131,
        133,
        5,
        29,
        0,
        0,
        132,
        131,
        1,
        0,
        0,
        0,
        133,
        136,
        1,
        0,
        0,
        0,
        134,
        132,
        1,
        0,
        0,
        0,
        134,
        135,
        1,
        0,
        0,
        0,
        135,
        138,
        1,
        0,
        0,
        0,
        136,
        134,
        1,
        0,
        0,
        0,
        137,
        139,
        3,
        10,
        5,
        0,
        138,
        137,
        1,
        0,
        0,
        0,
        138,
        139,
        1,
        0,
        0,
        0,
        139,
        143,
        1,
        0,
        0,
        0,
        140,
        142,
        5,
        29,
        0,
        0,
        141,
        140,
        1,
        0,
        0,
        0,
        142,
        145,
        1,
        0,
        0,
        0,
        143,
        141,
        1,
        0,
        0,
        0,
        143,
        144,
        1,
        0,
        0,
        0,
        144,
        147,
        1,
        0,
        0,
        0,
        145,
        143,
        1,
        0,
        0,
        0,
        146,
        148,
        3,
        30,
        15,
        0,
        147,
        146,
        1,
        0,
        0,
        0,
        147,
        148,
        1,
        0,
        0,
        0,
        148,
        152,
        1,
        0,
        0,
        0,
        149,
        151,
        5,
        29,
        0,
        0,
        150,
        149,
        1,
        0,
        0,
        0,
        151,
        154,
        1,
        0,
        0,
        0,
        152,
        150,
        1,
        0,
        0,
        0,
        152,
        153,
        1,
        0,
        0,
        0,
        153,
        156,
        1,
        0,
        0,
        0,
        154,
        152,
        1,
        0,
        0,
        0,
        155,
        157,
        3,
        10,
        5,
        0,
        156,
        155,
        1,
        0,
        0,
        0,
        156,
        157,
        1,
        0,
        0,
        0,
        157,
        161,
        1,
        0,
        0,
        0,
        158,
        160,
        5,
        29,
        0,
        0,
        159,
        158,
        1,
        0,
        0,
        0,
        160,
        163,
        1,
        0,
        0,
        0,
        161,
        159,
        1,
        0,
        0,
        0,
        161,
        162,
        1,
        0,
        0,
        0,
        162,
        164,
        1,
        0,
        0,
        0,
        163,
        161,
        1,
        0,
        0,
        0,
        164,
        165,
        5,
        5,
        0,
        0,
        165,
        9,
        1,
        0,
        0,
        0,
        166,
        170,
        3,
        12,
        6,
        0,
        167,
        169,
        5,
        29,
        0,
        0,
        168,
        167,
        1,
        0,
        0,
        0,
        169,
        172,
        1,
        0,
        0,
        0,
        170,
        168,
        1,
        0,
        0,
        0,
        170,
        171,
        1,
        0,
        0,
        0,
        171,
        173,
        1,
        0,
        0,
        0,
        172,
        170,
        1,
        0,
        0,
        0,
        173,
        174,
        3,
        10,
        5,
        0,
        174,
        177,
        1,
        0,
        0,
        0,
        175,
        177,
        3,
        12,
        6,
        0,
        176,
        166,
        1,
        0,
        0,
        0,
        176,
        175,
        1,
        0,
        0,
        0,
        177,
        11,
        1,
        0,
        0,
        0,
        178,
        182,
        3,
        14,
        7,
        0,
        179,
        181,
        5,
        29,
        0,
        0,
        180,
        179,
        1,
        0,
        0,
        0,
        181,
        184,
        1,
        0,
        0,
        0,
        182,
        180,
        1,
        0,
        0,
        0,
        182,
        183,
        1,
        0,
        0,
        0,
        183,
        185,
        1,
        0,
        0,
        0,
        184,
        182,
        1,
        0,
        0,
        0,
        185,
        186,
        5,
        6,
        0,
        0,
        186,
        227,
        1,
        0,
        0,
        0,
        187,
        191,
        3,
        32,
        16,
        0,
        188,
        190,
        5,
        29,
        0,
        0,
        189,
        188,
        1,
        0,
        0,
        0,
        190,
        193,
        1,
        0,
        0,
        0,
        191,
        189,
        1,
        0,
        0,
        0,
        191,
        192,
        1,
        0,
        0,
        0,
        192,
        194,
        1,
        0,
        0,
        0,
        193,
        191,
        1,
        0,
        0,
        0,
        194,
        198,
        3,
        8,
        4,
        0,
        195,
        197,
        5,
        29,
        0,
        0,
        196,
        195,
        1,
        0,
        0,
        0,
        197,
        200,
        1,
        0,
        0,
        0,
        198,
        196,
        1,
        0,
        0,
        0,
        198,
        199,
        1,
        0,
        0,
        0,
        199,
        215,
        1,
        0,
        0,
        0,
        200,
        198,
        1,
        0,
        0,
        0,
        201,
        205,
        5,
        24,
        0,
        0,
        202,
        204,
        5,
        29,
        0,
        0,
        203,
        202,
        1,
        0,
        0,
        0,
        204,
        207,
        1,
        0,
        0,
        0,
        205,
        203,
        1,
        0,
        0,
        0,
        205,
        206,
        1,
        0,
        0,
        0,
        206,
        208,
        1,
        0,
        0,
        0,
        207,
        205,
        1,
        0,
        0,
        0,
        208,
        212,
        3,
        8,
        4,
        0,
        209,
        211,
        5,
        29,
        0,
        0,
        210,
        209,
        1,
        0,
        0,
        0,
        211,
        214,
        1,
        0,
        0,
        0,
        212,
        210,
        1,
        0,
        0,
        0,
        212,
        213,
        1,
        0,
        0,
        0,
        213,
        216,
        1,
        0,
        0,
        0,
        214,
        212,
        1,
        0,
        0,
        0,
        215,
        201,
        1,
        0,
        0,
        0,
        215,
        216,
        1,
        0,
        0,
        0,
        216,
        227,
        1,
        0,
        0,
        0,
        217,
        221,
        3,
        36,
        18,
        0,
        218,
        220,
        5,
        29,
        0,
        0,
        219,
        218,
        1,
        0,
        0,
        0,
        220,
        223,
        1,
        0,
        0,
        0,
        221,
        219,
        1,
        0,
        0,
        0,
        221,
        222,
        1,
        0,
        0,
        0,
        222,
        224,
        1,
        0,
        0,
        0,
        223,
        221,
        1,
        0,
        0,
        0,
        224,
        225,
        3,
        8,
        4,
        0,
        225,
        227,
        1,
        0,
        0,
        0,
        226,
        178,
        1,
        0,
        0,
        0,
        226,
        187,
        1,
        0,
        0,
        0,
        226,
        217,
        1,
        0,
        0,
        0,
        227,
        13,
        1,
        0,
        0,
        0,
        228,
        232,
        3,
        16,
        8,
        0,
        229,
        232,
        3,
        42,
        21,
        0,
        230,
        232,
        3,
        46,
        23,
        0,
        231,
        228,
        1,
        0,
        0,
        0,
        231,
        229,
        1,
        0,
        0,
        0,
        231,
        230,
        1,
        0,
        0,
        0,
        232,
        15,
        1,
        0,
        0,
        0,
        233,
        234,
        6,
        8,
        -1,
        0,
        234,
        238,
        3,
        20,
        10,
        0,
        235,
        237,
        5,
        29,
        0,
        0,
        236,
        235,
        1,
        0,
        0,
        0,
        237,
        240,
        1,
        0,
        0,
        0,
        238,
        236,
        1,
        0,
        0,
        0,
        238,
        239,
        1,
        0,
        0,
        0,
        239,
        241,
        1,
        0,
        0,
        0,
        240,
        238,
        1,
        0,
        0,
        0,
        241,
        242,
        3,
        16,
        8,
        8,
        242,
        261,
        1,
        0,
        0,
        0,
        243,
        247,
        5,
        1,
        0,
        0,
        244,
        246,
        5,
        29,
        0,
        0,
        245,
        244,
        1,
        0,
        0,
        0,
        246,
        249,
        1,
        0,
        0,
        0,
        247,
        245,
        1,
        0,
        0,
        0,
        247,
        248,
        1,
        0,
        0,
        0,
        248,
        250,
        1,
        0,
        0,
        0,
        249,
        247,
        1,
        0,
        0,
        0,
        250,
        254,
        3,
        16,
        8,
        0,
        251,
        253,
        5,
        29,
        0,
        0,
        252,
        251,
        1,
        0,
        0,
        0,
        253,
        256,
        1,
        0,
        0,
        0,
        254,
        252,
        1,
        0,
        0,
        0,
        254,
        255,
        1,
        0,
        0,
        0,
        255,
        257,
        1,
        0,
        0,
        0,
        256,
        254,
        1,
        0,
        0,
        0,
        257,
        258,
        5,
        2,
        0,
        0,
        258,
        261,
        1,
        0,
        0,
        0,
        259,
        261,
        3,
        24,
        12,
        0,
        260,
        233,
        1,
        0,
        0,
        0,
        260,
        243,
        1,
        0,
        0,
        0,
        260,
        259,
        1,
        0,
        0,
        0,
        261,
        342,
        1,
        0,
        0,
        0,
        262,
        266,
        10,
        7,
        0,
        0,
        263,
        265,
        5,
        29,
        0,
        0,
        264,
        263,
        1,
        0,
        0,
        0,
        265,
        268,
        1,
        0,
        0,
        0,
        266,
        264,
        1,
        0,
        0,
        0,
        266,
        267,
        1,
        0,
        0,
        0,
        267,
        269,
        1,
        0,
        0,
        0,
        268,
        266,
        1,
        0,
        0,
        0,
        269,
        273,
        3,
        18,
        9,
        0,
        270,
        272,
        5,
        29,
        0,
        0,
        271,
        270,
        1,
        0,
        0,
        0,
        272,
        275,
        1,
        0,
        0,
        0,
        273,
        271,
        1,
        0,
        0,
        0,
        273,
        274,
        1,
        0,
        0,
        0,
        274,
        276,
        1,
        0,
        0,
        0,
        275,
        273,
        1,
        0,
        0,
        0,
        276,
        277,
        3,
        16,
        8,
        8,
        277,
        341,
        1,
        0,
        0,
        0,
        278,
        282,
        10,
        6,
        0,
        0,
        279,
        281,
        5,
        29,
        0,
        0,
        280,
        279,
        1,
        0,
        0,
        0,
        281,
        284,
        1,
        0,
        0,
        0,
        282,
        280,
        1,
        0,
        0,
        0,
        282,
        283,
        1,
        0,
        0,
        0,
        283,
        285,
        1,
        0,
        0,
        0,
        284,
        282,
        1,
        0,
        0,
        0,
        285,
        289,
        3,
        20,
        10,
        0,
        286,
        288,
        5,
        29,
        0,
        0,
        287,
        286,
        1,
        0,
        0,
        0,
        288,
        291,
        1,
        0,
        0,
        0,
        289,
        287,
        1,
        0,
        0,
        0,
        289,
        290,
        1,
        0,
        0,
        0,
        290,
        292,
        1,
        0,
        0,
        0,
        291,
        289,
        1,
        0,
        0,
        0,
        292,
        293,
        3,
        16,
        8,
        7,
        293,
        341,
        1,
        0,
        0,
        0,
        294,
        298,
        10,
        5,
        0,
        0,
        295,
        297,
        5,
        29,
        0,
        0,
        296,
        295,
        1,
        0,
        0,
        0,
        297,
        300,
        1,
        0,
        0,
        0,
        298,
        296,
        1,
        0,
        0,
        0,
        298,
        299,
        1,
        0,
        0,
        0,
        299,
        301,
        1,
        0,
        0,
        0,
        300,
        298,
        1,
        0,
        0,
        0,
        301,
        305,
        3,
        22,
        11,
        0,
        302,
        304,
        5,
        29,
        0,
        0,
        303,
        302,
        1,
        0,
        0,
        0,
        304,
        307,
        1,
        0,
        0,
        0,
        305,
        303,
        1,
        0,
        0,
        0,
        305,
        306,
        1,
        0,
        0,
        0,
        306,
        308,
        1,
        0,
        0,
        0,
        307,
        305,
        1,
        0,
        0,
        0,
        308,
        309,
        3,
        16,
        8,
        6,
        309,
        341,
        1,
        0,
        0,
        0,
        310,
        314,
        10,
        4,
        0,
        0,
        311,
        313,
        5,
        29,
        0,
        0,
        312,
        311,
        1,
        0,
        0,
        0,
        313,
        316,
        1,
        0,
        0,
        0,
        314,
        312,
        1,
        0,
        0,
        0,
        314,
        315,
        1,
        0,
        0,
        0,
        315,
        317,
        1,
        0,
        0,
        0,
        316,
        314,
        1,
        0,
        0,
        0,
        317,
        321,
        5,
        17,
        0,
        0,
        318,
        320,
        5,
        29,
        0,
        0,
        319,
        318,
        1,
        0,
        0,
        0,
        320,
        323,
        1,
        0,
        0,
        0,
        321,
        319,
        1,
        0,
        0,
        0,
        321,
        322,
        1,
        0,
        0,
        0,
        322,
        324,
        1,
        0,
        0,
        0,
        323,
        321,
        1,
        0,
        0,
        0,
        324,
        341,
        3,
        16,
        8,
        5,
        325,
        329,
        10,
        3,
        0,
        0,
        326,
        328,
        5,
        29,
        0,
        0,
        327,
        326,
        1,
        0,
        0,
        0,
        328,
        331,
        1,
        0,
        0,
        0,
        329,
        327,
        1,
        0,
        0,
        0,
        329,
        330,
        1,
        0,
        0,
        0,
        330,
        332,
        1,
        0,
        0,
        0,
        331,
        329,
        1,
        0,
        0,
        0,
        332,
        336,
        5,
        16,
        0,
        0,
        333,
        335,
        5,
        29,
        0,
        0,
        334,
        333,
        1,
        0,
        0,
        0,
        335,
        338,
        1,
        0,
        0,
        0,
        336,
        334,
        1,
        0,
        0,
        0,
        336,
        337,
        1,
        0,
        0,
        0,
        337,
        339,
        1,
        0,
        0,
        0,
        338,
        336,
        1,
        0,
        0,
        0,
        339,
        341,
        3,
        16,
        8,
        4,
        340,
        262,
        1,
        0,
        0,
        0,
        340,
        278,
        1,
        0,
        0,
        0,
        340,
        294,
        1,
        0,
        0,
        0,
        340,
        310,
        1,
        0,
        0,
        0,
        340,
        325,
        1,
        0,
        0,
        0,
        341,
        344,
        1,
        0,
        0,
        0,
        342,
        340,
        1,
        0,
        0,
        0,
        342,
        343,
        1,
        0,
        0,
        0,
        343,
        17,
        1,
        0,
        0,
        0,
        344,
        342,
        1,
        0,
        0,
        0,
        345,
        346,
        7,
        0,
        0,
        0,
        346,
        19,
        1,
        0,
        0,
        0,
        347,
        348,
        7,
        1,
        0,
        0,
        348,
        21,
        1,
        0,
        0,
        0,
        349,
        350,
        7,
        2,
        0,
        0,
        350,
        23,
        1,
        0,
        0,
        0,
        351,
        355,
        5,
        36,
        0,
        0,
        352,
        355,
        3,
        44,
        22,
        0,
        353,
        355,
        3,
        26,
        13,
        0,
        354,
        351,
        1,
        0,
        0,
        0,
        354,
        352,
        1,
        0,
        0,
        0,
        354,
        353,
        1,
        0,
        0,
        0,
        355,
        25,
        1,
        0,
        0,
        0,
        356,
        357,
        5,
        36,
        0,
        0,
        357,
        361,
        5,
        1,
        0,
        0,
        358,
        360,
        5,
        29,
        0,
        0,
        359,
        358,
        1,
        0,
        0,
        0,
        360,
        363,
        1,
        0,
        0,
        0,
        361,
        359,
        1,
        0,
        0,
        0,
        361,
        362,
        1,
        0,
        0,
        0,
        362,
        365,
        1,
        0,
        0,
        0,
        363,
        361,
        1,
        0,
        0,
        0,
        364,
        366,
        3,
        28,
        14,
        0,
        365,
        364,
        1,
        0,
        0,
        0,
        365,
        366,
        1,
        0,
        0,
        0,
        366,
        370,
        1,
        0,
        0,
        0,
        367,
        369,
        5,
        29,
        0,
        0,
        368,
        367,
        1,
        0,
        0,
        0,
        369,
        372,
        1,
        0,
        0,
        0,
        370,
        368,
        1,
        0,
        0,
        0,
        370,
        371,
        1,
        0,
        0,
        0,
        371,
        373,
        1,
        0,
        0,
        0,
        372,
        370,
        1,
        0,
        0,
        0,
        373,
        374,
        5,
        2,
        0,
        0,
        374,
        27,
        1,
        0,
        0,
        0,
        375,
        379,
        3,
        16,
        8,
        0,
        376,
        378,
        5,
        29,
        0,
        0,
        377,
        376,
        1,
        0,
        0,
        0,
        378,
        381,
        1,
        0,
        0,
        0,
        379,
        377,
        1,
        0,
        0,
        0,
        379,
        380,
        1,
        0,
        0,
        0,
        380,
        382,
        1,
        0,
        0,
        0,
        381,
        379,
        1,
        0,
        0,
        0,
        382,
        386,
        5,
        3,
        0,
        0,
        383,
        385,
        5,
        29,
        0,
        0,
        384,
        383,
        1,
        0,
        0,
        0,
        385,
        388,
        1,
        0,
        0,
        0,
        386,
        384,
        1,
        0,
        0,
        0,
        386,
        387,
        1,
        0,
        0,
        0,
        387,
        389,
        1,
        0,
        0,
        0,
        388,
        386,
        1,
        0,
        0,
        0,
        389,
        390,
        3,
        28,
        14,
        0,
        390,
        393,
        1,
        0,
        0,
        0,
        391,
        393,
        3,
        16,
        8,
        0,
        392,
        375,
        1,
        0,
        0,
        0,
        392,
        391,
        1,
        0,
        0,
        0,
        393,
        29,
        1,
        0,
        0,
        0,
        394,
        397,
        5,
        27,
        0,
        0,
        395,
        396,
        5,
        29,
        0,
        0,
        396,
        398,
        3,
        16,
        8,
        0,
        397,
        395,
        1,
        0,
        0,
        0,
        397,
        398,
        1,
        0,
        0,
        0,
        398,
        402,
        1,
        0,
        0,
        0,
        399,
        401,
        5,
        29,
        0,
        0,
        400,
        399,
        1,
        0,
        0,
        0,
        401,
        404,
        1,
        0,
        0,
        0,
        402,
        400,
        1,
        0,
        0,
        0,
        402,
        403,
        1,
        0,
        0,
        0,
        403,
        405,
        1,
        0,
        0,
        0,
        404,
        402,
        1,
        0,
        0,
        0,
        405,
        406,
        5,
        6,
        0,
        0,
        406,
        31,
        1,
        0,
        0,
        0,
        407,
        409,
        5,
        22,
        0,
        0,
        408,
        410,
        5,
        29,
        0,
        0,
        409,
        408,
        1,
        0,
        0,
        0,
        409,
        410,
        1,
        0,
        0,
        0,
        410,
        411,
        1,
        0,
        0,
        0,
        411,
        415,
        5,
        1,
        0,
        0,
        412,
        414,
        5,
        29,
        0,
        0,
        413,
        412,
        1,
        0,
        0,
        0,
        414,
        417,
        1,
        0,
        0,
        0,
        415,
        413,
        1,
        0,
        0,
        0,
        415,
        416,
        1,
        0,
        0,
        0,
        416,
        418,
        1,
        0,
        0,
        0,
        417,
        415,
        1,
        0,
        0,
        0,
        418,
        422,
        3,
        16,
        8,
        0,
        419,
        421,
        5,
        29,
        0,
        0,
        420,
        419,
        1,
        0,
        0,
        0,
        421,
        424,
        1,
        0,
        0,
        0,
        422,
        420,
        1,
        0,
        0,
        0,
        422,
        423,
        1,
        0,
        0,
        0,
        423,
        425,
        1,
        0,
        0,
        0,
        424,
        422,
        1,
        0,
        0,
        0,
        425,
        429,
        5,
        2,
        0,
        0,
        426,
        428,
        5,
        29,
        0,
        0,
        427,
        426,
        1,
        0,
        0,
        0,
        428,
        431,
        1,
        0,
        0,
        0,
        429,
        427,
        1,
        0,
        0,
        0,
        429,
        430,
        1,
        0,
        0,
        0,
        430,
        432,
        1,
        0,
        0,
        0,
        431,
        429,
        1,
        0,
        0,
        0,
        432,
        433,
        5,
        23,
        0,
        0,
        433,
        33,
        1,
        0,
        0,
        0,
        434,
        435,
        5,
        24,
        0,
        0,
        435,
        35,
        1,
        0,
        0,
        0,
        436,
        437,
        5,
        25,
        0,
        0,
        437,
        438,
        5,
        29,
        0,
        0,
        438,
        439,
        5,
        26,
        0,
        0,
        439,
        440,
        5,
        29,
        0,
        0,
        440,
        441,
        3,
        16,
        8,
        0,
        441,
        37,
        1,
        0,
        0,
        0,
        442,
        443,
        7,
        3,
        0,
        0,
        443,
        39,
        1,
        0,
        0,
        0,
        444,
        445,
        7,
        4,
        0,
        0,
        445,
        41,
        1,
        0,
        0,
        0,
        446,
        447,
        3,
        40,
        20,
        0,
        447,
        448,
        5,
        29,
        0,
        0,
        448,
        449,
        5,
        36,
        0,
        0,
        449,
        43,
        1,
        0,
        0,
        0,
        450,
        451,
        7,
        5,
        0,
        0,
        451,
        45,
        1,
        0,
        0,
        0,
        452,
        454,
        3,
        48,
        24,
        0,
        453,
        455,
        5,
        29,
        0,
        0,
        454,
        453,
        1,
        0,
        0,
        0,
        454,
        455,
        1,
        0,
        0,
        0,
        455,
        456,
        1,
        0,
        0,
        0,
        456,
        458,
        5,
        11,
        0,
        0,
        457,
        459,
        5,
        29,
        0,
        0,
        458,
        457,
        1,
        0,
        0,
        0,
        458,
        459,
        1,
        0,
        0,
        0,
        459,
        460,
        1,
        0,
        0,
        0,
        460,
        461,
        3,
        16,
        8,
        0,
        461,
        47,
        1,
        0,
        0,
        0,
        462,
        465,
        3,
        42,
        21,
        0,
        463,
        465,
        5,
        36,
        0,
        0,
        464,
        462,
        1,
        0,
        0,
        0,
        464,
        463,
        1,
        0,
        0,
        0,
        465,
        49,
        1,
        0,
        0,
        0,
        62,
        53,
        60,
        69,
        75,
        83,
        90,
        94,
        99,
        106,
        115,
        122,
        128,
        134,
        138,
        143,
        147,
        152,
        156,
        161,
        170,
        176,
        182,
        191,
        198,
        205,
        212,
        215,
        221,
        226,
        231,
        238,
        247,
        254,
        260,
        266,
        273,
        282,
        289,
        298,
        305,
        314,
        321,
        329,
        336,
        340,
        342,
        354,
        361,
        365,
        370,
        379,
        386,
        392,
        397,
        402,
        409,
        415,
        422,
        429,
        454,
        458,
        464,
    ]


class KrecikParser(Parser):
    grammarFileName = "Krecik.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'('",
        "')'",
        "','",
        "'{'",
        "'}'",
        "';'",
        "'*'",
        "'/'",
        "'+'",
        "'-'",
        "'='",
        "'cislo'",
        "'cely'",
        "'logicki'",
        "'ne'",
        "'nebo'",
        "'oba'",
        "'je'",
        "'neje'",
        "'wetsi'",
        "'mensi'",
        "'kdyz'",
        "'pak'",
        "'jiny'",
        "'opakujte'",
        "'az'",
        "'vratit'",
        "'nedostatek'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'\\t'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "Cislo",
        "Cely",
        "Logicki",
        "Ne",
        "Nebo",
        "Oba",
        "Je",
        "Neje",
        "Wetsi",
        "Mensi",
        "Kdyz",
        "Pak",
        "Jiny",
        "Opakujte",
        "Az",
        "Vratit",
        "Nedostatek",
        "SP",
        "NEWLINE",
        "LINECOMMENT",
        "BLOCKCOMMENT",
        "BOOLEAN_VAL",
        "FLOAT_VAL",
        "INT_VAL",
        "VARIABLE_NAME",
        "TAB",
    ]

    RULE_primary_expression = 0
    RULE_functions_declarations_list = 1
    RULE_function_declaration = 2
    RULE_declaration_arg_list = 3
    RULE_body = 4
    RULE_body_items_list = 5
    RULE_body_item = 6
    RULE_body_line = 7
    RULE_expression = 8
    RULE_primary_operator = 9
    RULE_secondary_operator = 10
    RULE_comparison_operator = 11
    RULE_atom = 12
    RULE_function_call = 13
    RULE_expressions_list = 14
    RULE_vratit = 15
    RULE_conditional_instruction = 16
    RULE_else_instruction = 17
    RULE_loop_instruction = 18
    RULE_return_var_type = 19
    RULE_var_type = 20
    RULE_declaration = 21
    RULE_literal = 22
    RULE_assignment = 23
    RULE_variable = 24

    ruleNames = [
        "primary_expression",
        "functions_declarations_list",
        "function_declaration",
        "declaration_arg_list",
        "body",
        "body_items_list",
        "body_item",
        "body_line",
        "expression",
        "primary_operator",
        "secondary_operator",
        "comparison_operator",
        "atom",
        "function_call",
        "expressions_list",
        "vratit",
        "conditional_instruction",
        "else_instruction",
        "loop_instruction",
        "return_var_type",
        "var_type",
        "declaration",
        "literal",
        "assignment",
        "variable",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    Cislo = 12
    Cely = 13
    Logicki = 14
    Ne = 15
    Nebo = 16
    Oba = 17
    Je = 18
    Neje = 19
    Wetsi = 20
    Mensi = 21
    Kdyz = 22
    Pak = 23
    Jiny = 24
    Opakujte = 25
    Az = 26
    Vratit = 27
    Nedostatek = 28
    SP = 29
    NEWLINE = 30
    LINECOMMENT = 31
    BLOCKCOMMENT = 32
    BOOLEAN_VAL = 33
    FLOAT_VAL = 34
    INT_VAL = 35
    VARIABLE_NAME = 36
    TAB = 37

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class Primary_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functions_declarations_list(self):
            return self.getTypedRuleContext(KrecikParser.Functions_declarations_listContext, 0)

        def EOF(self):
            return self.getToken(KrecikParser.EOF, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_primary_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimary_expression"):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimary_expression"):
                listener.exitPrimary_expression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimary_expression"):
                return visitor.visitPrimary_expression(self)
            else:
                return visitor.visitChildren(self)

    def primary_expression(self):
        localctx = KrecikParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primary_expression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 53
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 50
                self.match(KrecikParser.SP)
                self.state = 55
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 56
            self.functions_declarations_list()
            self.state = 60
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 57
                self.match(KrecikParser.SP)
                self.state = 62
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 63
            self.match(KrecikParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Functions_declarations_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_declaration(self):
            return self.getTypedRuleContext(KrecikParser.Function_declarationContext, 0)

        def functions_declarations_list(self):
            return self.getTypedRuleContext(KrecikParser.Functions_declarations_listContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_functions_declarations_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctions_declarations_list"):
                listener.enterFunctions_declarations_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctions_declarations_list"):
                listener.exitFunctions_declarations_list(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctions_declarations_list"):
                return visitor.visitFunctions_declarations_list(self)
            else:
                return visitor.visitChildren(self)

    def functions_declarations_list(self):
        localctx = KrecikParser.Functions_declarations_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_functions_declarations_list)
        self._la = 0  # Token type
        try:
            self.state = 75
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 3, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 65
                self.function_declaration()
                self.state = 69
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 66
                    self.match(KrecikParser.SP)
                    self.state = 71
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 72
                self.functions_declarations_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 74
                self.function_declaration()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_declarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_var_type(self):
            return self.getTypedRuleContext(KrecikParser.Return_var_typeContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def VARIABLE_NAME(self):
            return self.getToken(KrecikParser.VARIABLE_NAME, 0)

        def body(self):
            return self.getTypedRuleContext(KrecikParser.BodyContext, 0)

        def declaration_arg_list(self):
            return self.getTypedRuleContext(KrecikParser.Declaration_arg_listContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_function_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_declaration"):
                listener.enterFunction_declaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_declaration"):
                listener.exitFunction_declaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_declaration"):
                return visitor.visitFunction_declaration(self)
            else:
                return visitor.visitChildren(self)

    def function_declaration(self):
        localctx = KrecikParser.Function_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_function_declaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 77
            self.return_var_type()
            self.state = 78
            self.match(KrecikParser.SP)
            self.state = 79
            self.match(KrecikParser.VARIABLE_NAME)
            self.state = 83
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 80
                self.match(KrecikParser.SP)
                self.state = 85
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 86
            self.match(KrecikParser.T__0)
            self.state = 90
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 87
                    self.match(KrecikParser.SP)
                self.state = 92
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 5, self._ctx)

            self.state = 94
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 28672) != 0:
                self.state = 93
                self.declaration_arg_list()

            self.state = 99
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 96
                self.match(KrecikParser.SP)
                self.state = 101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 102
            self.match(KrecikParser.T__1)
            self.state = 106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 103
                self.match(KrecikParser.SP)
                self.state = 108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 109
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declaration_arg_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KrecikParser.DeclarationContext, 0)

        def declaration_arg_list(self):
            return self.getTypedRuleContext(KrecikParser.Declaration_arg_listContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_declaration_arg_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration_arg_list"):
                listener.enterDeclaration_arg_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration_arg_list"):
                listener.exitDeclaration_arg_list(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclaration_arg_list"):
                return visitor.visitDeclaration_arg_list(self)
            else:
                return visitor.visitChildren(self)

    def declaration_arg_list(self):
        localctx = KrecikParser.Declaration_arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_declaration_arg_list)
        self._la = 0  # Token type
        try:
            self.state = 128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 111
                self.declaration()
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 112
                    self.match(KrecikParser.SP)
                    self.state = 117
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 118
                self.match(KrecikParser.T__2)
                self.state = 122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 119
                    self.match(KrecikParser.SP)
                    self.state = 124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 125
                self.declaration_arg_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 127
                self.declaration()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def body_items_list(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.Body_items_listContext)
            else:
                return self.getTypedRuleContext(KrecikParser.Body_items_listContext, i)

        def vratit(self):
            return self.getTypedRuleContext(KrecikParser.VratitContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_body

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBody"):
                listener.enterBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBody"):
                listener.exitBody(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBody"):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)

    def body(self):
        localctx = KrecikParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_body)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self.match(KrecikParser.T__3)
            self.state = 134
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 12, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 131
                    self.match(KrecikParser.SP)
                self.state = 136
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 12, self._ctx)

            self.state = 138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.state = 137
                self.body_items_list()

            self.state = 143
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 140
                    self.match(KrecikParser.SP)
                self.state = 145
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 14, self._ctx)

            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 27:
                self.state = 146
                self.vratit()

            self.state = 152
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 149
                    self.match(KrecikParser.SP)
                self.state = 154
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 128886830594) != 0:
                self.state = 155
                self.body_items_list()

            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 158
                self.match(KrecikParser.SP)
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self.match(KrecikParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Body_items_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body_item(self):
            return self.getTypedRuleContext(KrecikParser.Body_itemContext, 0)

        def body_items_list(self):
            return self.getTypedRuleContext(KrecikParser.Body_items_listContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_body_items_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBody_items_list"):
                listener.enterBody_items_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBody_items_list"):
                listener.exitBody_items_list(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBody_items_list"):
                return visitor.visitBody_items_list(self)
            else:
                return visitor.visitChildren(self)

    def body_items_list(self):
        localctx = KrecikParser.Body_items_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_body_items_list)
        self._la = 0  # Token type
        try:
            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 166
                self.body_item()
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 167
                    self.match(KrecikParser.SP)
                    self.state = 172
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 173
                self.body_items_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.body_item()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Body_itemContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body_line(self):
            return self.getTypedRuleContext(KrecikParser.Body_lineContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def conditional_instruction(self):
            return self.getTypedRuleContext(KrecikParser.Conditional_instructionContext, 0)

        def body(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.BodyContext)
            else:
                return self.getTypedRuleContext(KrecikParser.BodyContext, i)

        def Jiny(self):
            return self.getToken(KrecikParser.Jiny, 0)

        def loop_instruction(self):
            return self.getTypedRuleContext(KrecikParser.Loop_instructionContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_body_item

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBody_item"):
                listener.enterBody_item(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBody_item"):
                listener.exitBody_item(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBody_item"):
                return visitor.visitBody_item(self)
            else:
                return visitor.visitChildren(self)

    def body_item(self):
        localctx = KrecikParser.Body_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_body_item)
        self._la = 0  # Token type
        try:
            self.state = 226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 9, 10, 12, 13, 14, 15, 33, 34, 35, 36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.body_line()
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 179
                    self.match(KrecikParser.SP)
                    self.state = 184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 185
                self.match(KrecikParser.T__5)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 187
                self.conditional_instruction()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 188
                    self.match(KrecikParser.SP)
                    self.state = 193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 194
                self.body()
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 195
                        self.match(KrecikParser.SP)
                    self.state = 200
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 24:
                    self.state = 201
                    self.match(KrecikParser.Jiny)
                    self.state = 205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == 29:
                        self.state = 202
                        self.match(KrecikParser.SP)
                        self.state = 207
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 208
                    self.body()
                    self.state = 212
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 25, self._ctx)
                    while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 209
                            self.match(KrecikParser.SP)
                        self.state = 214
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 25, self._ctx)

                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 217
                self.loop_instruction()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 218
                    self.match(KrecikParser.SP)
                    self.state = 223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 224
                self.body()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Body_lineContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def declaration(self):
            return self.getTypedRuleContext(KrecikParser.DeclarationContext, 0)

        def assignment(self):
            return self.getTypedRuleContext(KrecikParser.AssignmentContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_body_line

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBody_line"):
                listener.enterBody_line(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBody_line"):
                listener.exitBody_line(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBody_line"):
                return visitor.visitBody_line(self)
            else:
                return visitor.visitChildren(self)

    def body_line(self):
        localctx = KrecikParser.Body_lineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_body_line)
        try:
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 29, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 230
                self.assignment()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return KrecikParser.RULE_expression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ExpressionComparisonOperatorContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KrecikParser.ExpressionContext, i)

        def comparison_operator(self):
            return self.getTypedRuleContext(KrecikParser.Comparison_operatorContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionComparisonOperator"):
                listener.enterExpressionComparisonOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionComparisonOperator"):
                listener.exitExpressionComparisonOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionComparisonOperator"):
                return visitor.visitExpressionComparisonOperator(self)
            else:
                return visitor.visitChildren(self)

    class AtomExpressionContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(KrecikParser.AtomContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtomExpression"):
                listener.enterAtomExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtomExpression"):
                listener.exitAtomExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtomExpression"):
                return visitor.visitAtomExpression(self)
            else:
                return visitor.visitChildren(self)

    class ExpressionPrimaryOperatorContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KrecikParser.ExpressionContext, i)

        def primary_operator(self):
            return self.getTypedRuleContext(KrecikParser.Primary_operatorContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionPrimaryOperator"):
                listener.enterExpressionPrimaryOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionPrimaryOperator"):
                listener.exitExpressionPrimaryOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionPrimaryOperator"):
                return visitor.visitExpressionPrimaryOperator(self)
            else:
                return visitor.visitChildren(self)

    class ExpressionSecondaryOperatorContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KrecikParser.ExpressionContext, i)

        def secondary_operator(self):
            return self.getTypedRuleContext(KrecikParser.Secondary_operatorContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionSecondaryOperator"):
                listener.enterExpressionSecondaryOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionSecondaryOperator"):
                listener.exitExpressionSecondaryOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionSecondaryOperator"):
                return visitor.visitExpressionSecondaryOperator(self)
            else:
                return visitor.visitChildren(self)

    class ExpressionUnaryOperatorContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def secondary_operator(self):
            return self.getTypedRuleContext(KrecikParser.Secondary_operatorContext, 0)

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionUnaryOperator"):
                listener.enterExpressionUnaryOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionUnaryOperator"):
                listener.exitExpressionUnaryOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionUnaryOperator"):
                return visitor.visitExpressionUnaryOperator(self)
            else:
                return visitor.visitChildren(self)

    class ExpressionLogicalOrOperatorContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KrecikParser.ExpressionContext, i)

        def Nebo(self):
            return self.getToken(KrecikParser.Nebo, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionLogicalOrOperator"):
                listener.enterExpressionLogicalOrOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionLogicalOrOperator"):
                listener.exitExpressionLogicalOrOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionLogicalOrOperator"):
                return visitor.visitExpressionLogicalOrOperator(self)
            else:
                return visitor.visitChildren(self)

    class ExpressionLogicalAndOperatorContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(KrecikParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KrecikParser.ExpressionContext, i)

        def Oba(self):
            return self.getToken(KrecikParser.Oba, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionLogicalAndOperator"):
                listener.enterExpressionLogicalAndOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionLogicalAndOperator"):
                listener.exitExpressionLogicalAndOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionLogicalAndOperator"):
                return visitor.visitExpressionLogicalAndOperator(self)
            else:
                return visitor.visitChildren(self)

    class ParenthesisedExpressionContext(ExpressionContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a KrecikParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesisedExpression"):
                listener.enterParenthesisedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesisedExpression"):
                listener.exitParenthesisedExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParenthesisedExpression"):
                return visitor.visitParenthesisedExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = KrecikParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_expression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 15]:
                localctx = KrecikParser.ExpressionUnaryOperatorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 234
                self.secondary_operator()
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 235
                    self.match(KrecikParser.SP)
                    self.state = 240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 241
                self.expression(8)
                pass
            elif token in [1]:
                localctx = KrecikParser.ParenthesisedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 243
                self.match(KrecikParser.T__0)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 244
                    self.match(KrecikParser.SP)
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 250
                self.expression(0)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 251
                    self.match(KrecikParser.SP)
                    self.state = 256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 257
                self.match(KrecikParser.T__1)
                pass
            elif token in [33, 34, 35, 36]:
                localctx = KrecikParser.AtomExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 259
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 45, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 340
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
                    if la_ == 1:
                        localctx = KrecikParser.ExpressionPrimaryOperatorContext(
                            self, KrecikParser.ExpressionContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 262
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 266
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 263
                            self.match(KrecikParser.SP)
                            self.state = 268
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 269
                        self.primary_operator()
                        self.state = 273
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 270
                            self.match(KrecikParser.SP)
                            self.state = 275
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 276
                        self.expression(8)
                        pass

                    elif la_ == 2:
                        localctx = KrecikParser.ExpressionSecondaryOperatorContext(
                            self, KrecikParser.ExpressionContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 278
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 279
                            self.match(KrecikParser.SP)
                            self.state = 284
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 285
                        self.secondary_operator()
                        self.state = 289
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 286
                            self.match(KrecikParser.SP)
                            self.state = 291
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 292
                        self.expression(7)
                        pass

                    elif la_ == 3:
                        localctx = KrecikParser.ExpressionComparisonOperatorContext(
                            self, KrecikParser.ExpressionContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 294
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 298
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 295
                            self.match(KrecikParser.SP)
                            self.state = 300
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 301
                        self.comparison_operator()
                        self.state = 305
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 302
                            self.match(KrecikParser.SP)
                            self.state = 307
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 308
                        self.expression(6)
                        pass

                    elif la_ == 4:
                        localctx = KrecikParser.ExpressionLogicalAndOperatorContext(
                            self, KrecikParser.ExpressionContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 310
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 311
                            self.match(KrecikParser.SP)
                            self.state = 316
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 317
                        self.match(KrecikParser.Oba)
                        self.state = 321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 318
                            self.match(KrecikParser.SP)
                            self.state = 323
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 324
                        self.expression(5)
                        pass

                    elif la_ == 5:
                        localctx = KrecikParser.ExpressionLogicalOrOperatorContext(
                            self, KrecikParser.ExpressionContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 325
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 329
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 326
                            self.match(KrecikParser.SP)
                            self.state = 331
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 332
                        self.match(KrecikParser.Nebo)
                        self.state = 336
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la == 29:
                            self.state = 333
                            self.match(KrecikParser.SP)
                            self.state = 338
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 339
                        self.expression(4)
                        pass

                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 45, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Primary_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return KrecikParser.RULE_primary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimary_operator"):
                listener.enterPrimary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimary_operator"):
                listener.exitPrimary_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimary_operator"):
                return visitor.visitPrimary_operator(self)
            else:
                return visitor.visitChildren(self)

    def primary_operator(self):
        localctx = KrecikParser.Primary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_primary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            _la = self._input.LA(1)
            if not (_la == 7 or _la == 8):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Secondary_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ne(self):
            return self.getToken(KrecikParser.Ne, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_secondary_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSecondary_operator"):
                listener.enterSecondary_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSecondary_operator"):
                listener.exitSecondary_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSecondary_operator"):
                return visitor.visitSecondary_operator(self)
            else:
                return visitor.visitChildren(self)

    def secondary_operator(self):
        localctx = KrecikParser.Secondary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_secondary_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 34304) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Mensi(self):
            return self.getToken(KrecikParser.Mensi, 0)

        def Wetsi(self):
            return self.getToken(KrecikParser.Wetsi, 0)

        def Je(self):
            return self.getToken(KrecikParser.Je, 0)

        def Neje(self):
            return self.getToken(KrecikParser.Neje, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_comparison_operator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparison_operator"):
                listener.enterComparison_operator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparison_operator"):
                listener.exitComparison_operator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComparison_operator"):
                return visitor.visitComparison_operator(self)
            else:
                return visitor.visitChildren(self)

    def comparison_operator(self):
        localctx = KrecikParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison_operator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 3932160) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_NAME(self):
            return self.getToken(KrecikParser.VARIABLE_NAME, 0)

        def literal(self):
            return self.getTypedRuleContext(KrecikParser.LiteralContext, 0)

        def function_call(self):
            return self.getTypedRuleContext(KrecikParser.Function_callContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_atom

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAtom"):
                listener.enterAtom(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAtom"):
                listener.exitAtom(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAtom"):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)

    def atom(self):
        localctx = KrecikParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_atom)
        try:
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.match(KrecikParser.VARIABLE_NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 352
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.function_call()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE_NAME(self):
            return self.getToken(KrecikParser.VARIABLE_NAME, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def expressions_list(self):
            return self.getTypedRuleContext(KrecikParser.Expressions_listContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_function_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_call"):
                listener.enterFunction_call(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_call"):
                listener.exitFunction_call(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunction_call"):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)

    def function_call(self):
        localctx = KrecikParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_call)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(KrecikParser.VARIABLE_NAME)
            self.state = 357
            self.match(KrecikParser.T__0)
            self.state = 361
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 47, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 358
                    self.match(KrecikParser.SP)
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 47, self._ctx)

            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 128849053186) != 0:
                self.state = 364
                self.expressions_list()

            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 367
                self.match(KrecikParser.SP)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 373
            self.match(KrecikParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expressions_listContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def expressions_list(self):
            return self.getTypedRuleContext(KrecikParser.Expressions_listContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_expressions_list

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressions_list"):
                listener.enterExpressions_list(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressions_list"):
                listener.exitExpressions_list(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressions_list"):
                return visitor.visitExpressions_list(self)
            else:
                return visitor.visitChildren(self)

    def expressions_list(self):
        localctx = KrecikParser.Expressions_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_expressions_list)
        self._la = 0  # Token type
        try:
            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 52, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 375
                self.expression(0)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 376
                    self.match(KrecikParser.SP)
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 382
                self.match(KrecikParser.T__2)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 29:
                    self.state = 383
                    self.match(KrecikParser.SP)
                    self.state = 388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 389
                self.expressions_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.expression(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VratitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vratit(self):
            return self.getToken(KrecikParser.Vratit, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_vratit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVratit"):
                listener.enterVratit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVratit"):
                listener.exitVratit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVratit"):
                return visitor.visitVratit(self)
            else:
                return visitor.visitChildren(self)

    def vratit(self):
        localctx = KrecikParser.VratitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_vratit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(KrecikParser.Vratit)
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 395
                self.match(KrecikParser.SP)
                self.state = 396
                self.expression(0)

            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 399
                self.match(KrecikParser.SP)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 405
            self.match(KrecikParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conditional_instructionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Kdyz(self):
            return self.getToken(KrecikParser.Kdyz, 0)

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def Pak(self):
            return self.getToken(KrecikParser.Pak, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_conditional_instruction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditional_instruction"):
                listener.enterConditional_instruction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditional_instruction"):
                listener.exitConditional_instruction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditional_instruction"):
                return visitor.visitConditional_instruction(self)
            else:
                return visitor.visitChildren(self)

    def conditional_instruction(self):
        localctx = KrecikParser.Conditional_instructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_conditional_instruction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(KrecikParser.Kdyz)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 29:
                self.state = 408
                self.match(KrecikParser.SP)

            self.state = 411
            self.match(KrecikParser.T__0)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 412
                self.match(KrecikParser.SP)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 418
            self.expression(0)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 419
                self.match(KrecikParser.SP)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 425
            self.match(KrecikParser.T__1)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 29:
                self.state = 426
                self.match(KrecikParser.SP)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 432
            self.match(KrecikParser.Pak)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Else_instructionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Jiny(self):
            return self.getToken(KrecikParser.Jiny, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_else_instruction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElse_instruction"):
                listener.enterElse_instruction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElse_instruction"):
                listener.exitElse_instruction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElse_instruction"):
                return visitor.visitElse_instruction(self)
            else:
                return visitor.visitChildren(self)

    def else_instruction(self):
        localctx = KrecikParser.Else_instructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_else_instruction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(KrecikParser.Jiny)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Loop_instructionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Opakujte(self):
            return self.getToken(KrecikParser.Opakujte, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def Az(self):
            return self.getToken(KrecikParser.Az, 0)

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_loop_instruction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLoop_instruction"):
                listener.enterLoop_instruction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLoop_instruction"):
                listener.exitLoop_instruction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLoop_instruction"):
                return visitor.visitLoop_instruction(self)
            else:
                return visitor.visitChildren(self)

    def loop_instruction(self):
        localctx = KrecikParser.Loop_instructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_loop_instruction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(KrecikParser.Opakujte)
            self.state = 437
            self.match(KrecikParser.SP)
            self.state = 438
            self.match(KrecikParser.Az)
            self.state = 439
            self.match(KrecikParser.SP)
            self.state = 440
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_var_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cislo(self):
            return self.getToken(KrecikParser.Cislo, 0)

        def Cely(self):
            return self.getToken(KrecikParser.Cely, 0)

        def Logicki(self):
            return self.getToken(KrecikParser.Logicki, 0)

        def Nedostatek(self):
            return self.getToken(KrecikParser.Nedostatek, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_return_var_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturn_var_type"):
                listener.enterReturn_var_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturn_var_type"):
                listener.exitReturn_var_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturn_var_type"):
                return visitor.visitReturn_var_type(self)
            else:
                return visitor.visitChildren(self)

    def return_var_type(self):
        localctx = KrecikParser.Return_var_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_return_var_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 268464128) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_typeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cislo(self):
            return self.getToken(KrecikParser.Cislo, 0)

        def Cely(self):
            return self.getToken(KrecikParser.Cely, 0)

        def Logicki(self):
            return self.getToken(KrecikParser.Logicki, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_var_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVar_type"):
                listener.enterVar_type(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVar_type"):
                listener.exitVar_type(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVar_type"):
                return visitor.visitVar_type(self)
            else:
                return visitor.visitChildren(self)

    def var_type(self):
        localctx = KrecikParser.Var_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_var_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 28672) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_type(self):
            return self.getTypedRuleContext(KrecikParser.Var_typeContext, 0)

        def SP(self):
            return self.getToken(KrecikParser.SP, 0)

        def VARIABLE_NAME(self):
            return self.getToken(KrecikParser.VARIABLE_NAME, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_declaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDeclaration"):
                listener.enterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDeclaration"):
                listener.exitDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDeclaration"):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def declaration(self):
        localctx = KrecikParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.var_type()
            self.state = 447
            self.match(KrecikParser.SP)
            self.state = 448
            self.match(KrecikParser.VARIABLE_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_VAL(self):
            return self.getToken(KrecikParser.BOOLEAN_VAL, 0)

        def FLOAT_VAL(self):
            return self.getToken(KrecikParser.FLOAT_VAL, 0)

        def INT_VAL(self):
            return self.getToken(KrecikParser.INT_VAL, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)

    def literal(self):
        localctx = KrecikParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_literal)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 60129542144) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(KrecikParser.VariableContext, 0)

        def expression(self):
            return self.getTypedRuleContext(KrecikParser.ExpressionContext, 0)

        def SP(self, i: int = None):
            if i is None:
                return self.getTokens(KrecikParser.SP)
            else:
                return self.getToken(KrecikParser.SP, i)

        def getRuleIndex(self):
            return KrecikParser.RULE_assignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignment"):
                listener.enterAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignment"):
                listener.exitAssignment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssignment"):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)

    def assignment(self):
        localctx = KrecikParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignment)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.variable()
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 29:
                self.state = 453
                self.match(KrecikParser.SP)

            self.state = 456
            self.match(KrecikParser.T__10)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 29:
                self.state = 457
                self.match(KrecikParser.SP)

            self.state = 460
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KrecikParser.DeclarationContext, 0)

        def VARIABLE_NAME(self):
            return self.getToken(KrecikParser.VARIABLE_NAME, 0)

        def getRuleIndex(self):
            return KrecikParser.RULE_variable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariable"):
                listener.enterVariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariable"):
                listener.exitVariable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariable"):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)

    def variable(self):
        localctx = KrecikParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_variable)
        try:
            self.state = 464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.declaration()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(KrecikParser.VARIABLE_NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[8] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 7)

        if predIndex == 1:
            return self.precpred(self._ctx, 6)

        if predIndex == 2:
            return self.precpred(self._ctx, 5)

        if predIndex == 3:
            return self.precpred(self._ctx, 4)

        if predIndex == 4:
            return self.precpred(self._ctx, 3)
