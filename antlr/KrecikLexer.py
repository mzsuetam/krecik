# Generated from Krecik.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
        28,4,28,189,8,28,11,28,12,28,190,1,28,1,28,1,29,1,29,1,29,1,29,1,
        30,4,30,200,8,30,11,30,12,30,201,1,30,1,30,1,31,1,31,1,31,1,31,5,
        31,210,8,31,10,31,12,31,213,9,31,1,31,1,31,1,32,4,32,218,8,32,11,
        32,12,32,219,1,33,1,33,1,33,1,33,5,33,226,8,33,10,33,12,33,229,9,
        33,1,33,3,33,232,8,33,1,33,1,33,4,33,236,8,33,11,33,12,33,237,3,
        33,240,8,33,1,34,1,34,1,34,5,34,245,8,34,10,34,12,34,248,9,34,3,
        34,250,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,261,
        8,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,0,59,35,61,29,63,30,65,31,
        67,32,69,33,71,34,1,0,5,1,0,32,32,2,0,10,10,13,13,2,0,95,95,97,122,
        1,0,48,57,1,0,49,57,273,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,5,77,
        1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,0,0,13,85,1,0,0,0,15,
        87,1,0,0,0,17,89,1,0,0,0,19,91,1,0,0,0,21,93,1,0,0,0,23,95,1,0,0,
        0,25,101,1,0,0,0,27,106,1,0,0,0,29,114,1,0,0,0,31,117,1,0,0,0,33,
        122,1,0,0,0,35,126,1,0,0,0,37,129,1,0,0,0,39,134,1,0,0,0,41,140,
        1,0,0,0,43,146,1,0,0,0,45,151,1,0,0,0,47,155,1,0,0,0,49,164,1,0,
        0,0,51,167,1,0,0,0,53,174,1,0,0,0,55,185,1,0,0,0,57,188,1,0,0,0,
        59,194,1,0,0,0,61,199,1,0,0,0,63,205,1,0,0,0,65,217,1,0,0,0,67,239,
        1,0,0,0,69,249,1,0,0,0,71,260,1,0,0,0,73,74,5,40,0,0,74,2,1,0,0,
        0,75,76,5,41,0,0,76,4,1,0,0,0,77,78,5,44,0,0,78,6,1,0,0,0,79,80,
        5,123,0,0,80,8,1,0,0,0,81,82,5,125,0,0,82,10,1,0,0,0,83,84,5,59,
        0,0,84,12,1,0,0,0,85,86,5,43,0,0,86,14,1,0,0,0,87,88,5,45,0,0,88,
        16,1,0,0,0,89,90,5,42,0,0,90,18,1,0,0,0,91,92,5,47,0,0,92,20,1,0,
        0,0,93,94,5,61,0,0,94,22,1,0,0,0,95,96,5,99,0,0,96,97,5,105,0,0,
        97,98,5,115,0,0,98,99,5,108,0,0,99,100,5,111,0,0,100,24,1,0,0,0,
        101,102,5,99,0,0,102,103,5,101,0,0,103,104,5,108,0,0,104,105,5,121,
        0,0,105,26,1,0,0,0,106,107,5,108,0,0,107,108,5,111,0,0,108,109,5,
        103,0,0,109,110,5,105,0,0,110,111,5,99,0,0,111,112,5,107,0,0,112,
        113,5,105,0,0,113,28,1,0,0,0,114,115,5,110,0,0,115,116,5,101,0,0,
        116,30,1,0,0,0,117,118,5,110,0,0,118,119,5,101,0,0,119,120,5,98,
        0,0,120,121,5,111,0,0,121,32,1,0,0,0,122,123,5,111,0,0,123,124,5,
        98,0,0,124,125,5,97,0,0,125,34,1,0,0,0,126,127,5,106,0,0,127,128,
        5,101,0,0,128,36,1,0,0,0,129,130,5,110,0,0,130,131,5,101,0,0,131,
        132,5,106,0,0,132,133,5,101,0,0,133,38,1,0,0,0,134,135,5,119,0,0,
        135,136,5,101,0,0,136,137,5,116,0,0,137,138,5,115,0,0,138,139,5,
        105,0,0,139,40,1,0,0,0,140,141,5,109,0,0,141,142,5,101,0,0,142,143,
        5,110,0,0,143,144,5,115,0,0,144,145,5,105,0,0,145,42,1,0,0,0,146,
        147,5,107,0,0,147,148,5,100,0,0,148,149,5,121,0,0,149,150,5,122,
        0,0,150,44,1,0,0,0,151,152,5,112,0,0,152,153,5,97,0,0,153,154,5,
        107,0,0,154,46,1,0,0,0,155,156,5,111,0,0,156,157,5,112,0,0,157,158,
        5,97,0,0,158,159,5,107,0,0,159,160,5,117,0,0,160,161,5,106,0,0,161,
        162,5,116,0,0,162,163,5,101,0,0,163,48,1,0,0,0,164,165,5,97,0,0,
        165,166,5,122,0,0,166,50,1,0,0,0,167,168,5,118,0,0,168,169,5,114,
        0,0,169,170,5,97,0,0,170,171,5,116,0,0,171,172,5,105,0,0,172,173,
        5,116,0,0,173,52,1,0,0,0,174,175,5,110,0,0,175,176,5,101,0,0,176,
        177,5,100,0,0,177,178,5,111,0,0,178,179,5,115,0,0,179,180,5,116,
        0,0,180,181,5,97,0,0,181,182,5,116,0,0,182,183,5,101,0,0,183,184,
        5,107,0,0,184,54,1,0,0,0,185,186,7,0,0,0,186,56,1,0,0,0,187,189,
        7,0,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,
        1,0,0,0,191,192,1,0,0,0,192,193,6,28,0,0,193,58,1,0,0,0,194,195,
        5,9,0,0,195,196,1,0,0,0,196,197,6,29,0,0,197,60,1,0,0,0,198,200,
        7,1,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,
        1,0,0,0,202,203,1,0,0,0,203,204,6,30,1,0,204,62,1,0,0,0,205,206,
        5,47,0,0,206,207,5,47,0,0,207,211,1,0,0,0,208,210,8,1,0,0,209,208,
        1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,
        1,0,0,0,213,211,1,0,0,0,214,215,6,31,1,0,215,64,1,0,0,0,216,218,
        7,2,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,1,0,0,0,219,220,
        1,0,0,0,220,66,1,0,0,0,221,240,3,69,34,0,222,223,3,69,34,0,223,227,
        5,46,0,0,224,226,7,3,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,
        1,0,0,0,227,228,1,0,0,0,228,240,1,0,0,0,229,227,1,0,0,0,230,232,
        5,48,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,235,
        5,46,0,0,234,236,7,3,0,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,
        1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,221,1,0,0,0,239,222,
        1,0,0,0,239,231,1,0,0,0,240,68,1,0,0,0,241,250,5,48,0,0,242,246,
        7,4,0,0,243,245,7,3,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,
        1,0,0,0,246,247,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,249,241,
        1,0,0,0,249,242,1,0,0,0,250,70,1,0,0,0,251,252,5,116,0,0,252,253,
        5,114,0,0,253,254,5,117,0,0,254,261,5,101,0,0,255,256,5,102,0,0,
        256,257,5,97,0,0,257,258,5,108,0,0,258,259,5,115,0,0,259,261,5,101,
        0,0,260,251,1,0,0,0,260,255,1,0,0,0,261,72,1,0,0,0,12,0,190,201,
        211,219,227,231,237,239,246,249,260,2,7,28,0,6,0,0
    ]

class KrecikLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    Cislo = 12
    Cely = 13
    Logicki = 14
    Ne = 15
    Nebo = 16
    Oba = 17
    Je = 18
    Neje = 19
    Wetsi = 20
    Mensi = 21
    Kdyz = 22
    Pak = 23
    Opakujte = 24
    Az = 25
    Vratit = 26
    Nedostatek = 27
    SP = 28
    NEWLINE = 29
    COMMENT = 30
    VARIABLE_NAME = 31
    FLOAT_VAL = 32
    INT_VAL = 33
    BOOLEAN_VAL = 34
    TAB = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'{'", "'}'", "';'", "'+'", "'-'", "'*'", 
            "'/'", "'='", "'cislo'", "'cely'", "'logicki'", "'ne'", "'nebo'", 
            "'oba'", "'je'", "'neje'", "'wetsi'", "'mensi'", "'kdyz'", "'pak'", 
            "'opakujte'", "'az'", "'vratit'", "'nedostatek'", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "Cislo", "Cely", "Logicki", "Ne", "Nebo", "Oba", "Je", "Neje", 
            "Wetsi", "Mensi", "Kdyz", "Pak", "Opakujte", "Az", "Vratit", 
            "Nedostatek", "SP", "NEWLINE", "COMMENT", "VARIABLE_NAME", "FLOAT_VAL", 
            "INT_VAL", "BOOLEAN_VAL", "TAB" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "Cislo", "Cely", "Logicki", 
                  "Ne", "Nebo", "Oba", "Je", "Neje", "Wetsi", "Mensi", "Kdyz", 
                  "Pak", "Opakujte", "Az", "Vratit", "Nedostatek", "SP", 
                  "SPACES", "TAB", "NEWLINE", "COMMENT", "VARIABLE_NAME", 
                  "FLOAT_VAL", "INT_VAL", "BOOLEAN_VAL" ]

    grammarFileName = "Krecik.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


